plugins {
    id "edu.sc.seis.macAppBundle" version "2.1.6"
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile 'com.github.openstreetmap:osmosis:+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'

// The heap size for the JVM running the application is increased to allow
// the included map of Denmark to be loaded.
def memSize = "1536m"

mainClassName = 'Driver'
applicationDefaultJvmArgs = [ "-Xmx"+memSize ]

macAppBundle {
    mainClassName = "Driver"
    appName = project.name
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    javaExtras.put("-Xdock:name", appName)
    // The -Xmx option does not use an equals sign between the option and the argument,
    // so the entire option is passed as the first argument.
    // Passing null for the second argument ensures that there will be no equals sign following the option.
    javaExtras.put("-Xmx"+memSize, null)
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

// Customize the 'run' task to accept the path for map data using
run {
    if (System.getProperty("mapPath") != null) {
        args System.getProperty("mapPath").split()
    }
}

// This task copies the dependenciy libraries into the jar destination
// so it is possible running the application by simply double-clicking the jar
task copyLibJars(type: Copy) {
    from configurations.runtime
    into jar.destinationDir.getPath() + '/lib'
}

jar {
    manifest {
        attributes 'Main-Class': 'Driver'
        attributes 'Class-Path': configurations.runtime.files.collect { "lib/" + it.name }.join(' ')
    }
}
jar.dependsOn(copyLibJars)

test {
    // Pass the path for the test data to the test JVM
    systemProperty 'testDataPath', 'data/map-anholt-raw.osm'
    testLogging {
        afterSuite {
            // Print a test summary, even when all tests are successful
            desc, result ->
            if (!desc.parent) { // will match the outermost suite
                if (result.skippedTestCount > 0)
                    println "WARNING: Some tests were skipped. Run 'gradle test --rerun-tasks -i' for more information."
                println "Results: ${result.resultType} (${result.testCount} tests, "+
                "${result.successfulTestCount} successes, "+
                "${result.failedTestCount} failures, "+
                "${result.skippedTestCount} skipped)"
            }
        }
    }
}

distributions {
    windows {
        contents {
            from (startScripts) {
                include '*.bat'
            }
            into('lib') {
                from jar
                from jar.destinationDir.getPath() + '/lib'
            }
        }
    }
    linux {
        contents {
            from startScripts
            // This assumes that no other startup scripts than for Unix and Windows exists
            exclude '*.bat'
            into('lib') {
                from jar
                from jar.destinationDir.getPath() + '/lib'
            }
        }
    }
}

task installOsxDist(type: Copy, dependsOn: createApp) {
    // Cannot use task createApp directly as 'from' as it is a placeholder task which simply
    // invokes many other tasks. createApp has no defined output so Gradle ALWAYS thinks the
    // createApp is UP-TO-DATE. At least, that is what I think
    from "${->project.buildDir}/${->project.macAppBundle.appOutputDir}"
    into "${->project.buildDir}/install"
}

// This is done because the default startscripts assume that they exist in a subfolder to the base folder of the installation
// eg. aMap2016/bin/<script>. This structure changed is changed for the platform specific distributions defined above so that the
// the scartscript is directly in the installation folder eg. aMap2016/<script>
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(linuxDistZip) || taskGraph.hasTask(linuxDistTar) || taskGraph.hasTask(installLinuxDist) ||
        taskGraph.hasTask(windowsDistZip) || taskGraph.hasTask(windowsDistTar) || taskGraph.hasTask(installWindowsDist))
    {
        startScripts.doLast {
            unixScript.text = unixScript.text.replace("cd \"`dirname \\\"\$PRG\\\"`/..\"", "cd \"`dirname \\\"\$PRG\\\"`\"")
        }
    }
}

task distAllZip {
    dependsOn windowsDistZip
    dependsOn linuxDistZip
}

task distAllTar {
    dependsOn windowsDistTar
    dependsOn linuxDistTar
}

task installAllDist {
    dependsOn installWindowsDist
    dependsOn installLinuxDist
    dependsOn installOsxDist
}